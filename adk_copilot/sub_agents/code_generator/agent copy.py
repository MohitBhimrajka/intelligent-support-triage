# FILE: adk_copilot/sub_agents/code_generator/agent.py

"""Defines the Code Generator Agent, responsible for creating code."""

import os
from google.adk.agents import LlmAgent

# Helper function to load the style guide from the local file
def _load_style_guide():
    """Loads the ADK style guide from a local markdown file."""
    style_guide_path = os.path.join(os.path.dirname(__file__), "style_guide.md")
    try:
        with open(style_guide_path, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        print("ERROR: adk_copilot/sub_agents/code_generator/style_guide.md not found.")
        return "Error: Style guide not found."

# Load the style guide once when the module is imported
ADK_STYLE_GUIDE = _load_style_guide()

# Construct the final prompt string at the module level.
# This evaluates the f-string immediately and creates a static string.
GENERATOR_INSTRUCTION = f"""
You are an Expert ADK Solutions Architect. You have TWO distinct modes of operation based on the user's request.

**CRITICAL: You MUST strictly follow the ADK Style Guide provided below.**
---
{ADK_STYLE_GUIDE}
---

**MODE DETECTION:**
- If user request contains "user_confirmation": MODE 2 (Generate Code)
- Otherwise: MODE 1 (Plan Only)

**MODE 1: INITIAL PLANNING (First Call)**
Your response MUST be ONLY a valid JSON object with these exact keys:

```json
{{
  "plan": "Single paragraph describing the agent architecture you will build",
  "mermaid_syntax": "graph TD; Start[User Request] --> Agent[Main Agent] --> Tool[Custom Tool] --> API[External API] --> Response[Return Data]",
  "inferred_dependencies": ["requests", "other-package"]
}}
```

**JSON Requirements:**
- NO extra text before or after the JSON
- "plan": One clear paragraph, no line breaks
- "mermaid_syntax": Valid mermaid graph syntax, NO parentheses () or brackets [] in node labels
- "inferred_dependencies": Array of package names needed for tools

**Mermaid Syntax Rules:**
- Use simple identifiers: `UserRequest`, `MainAgent`, `CustomTool`  
- Node labels in quotes: `Node["Simple Label Text"]`
- NO special characters in labels: (), [], <>, <>
- Keep it simple: Start -> Agent -> Tool -> API -> End

**MODE 2: CODE GENERATION (Second Call)**
Generate complete, production-ready code following these rules:

1. **File Structure Format:**
```
==== FILE: project_name/agent.py ====
[complete file content]

==== FILE: project_name/tools.py ====
[complete file content]
```

2. **Mandatory Requirements:**
- Include ALL dependencies from your plan in pyproject.toml
- Follow ADK Style Guide exactly
- Include proper error handling in all tools
- Use environment variables for API keys
- Add logging to all tool functions

3. **Quality Checklist:**
- `root_agent` defined in agent.py? ✓
- `__init__.py` imports root_agent? ✓  
- All tools have error handling? ✓
- No forbidden patterns (main.py, if __name__)? ✓
- Dependencies match inferred_dependencies? ✓

4. **Final Structure:**
After all files, include exactly:

## Next Steps

1. Save the generated files to your local machine, maintaining the directory structure.
2. Navigate to project root and run `poetry install` to set up dependencies.
3. Run the agent: `adk run <agent_name>` or `adk web`

---
**Disclaimer & Resources:** The code provided is generated by an AI model for educational purposes and is intended as a starting point. For the most accurate and up-to-date information, please always refer to the official [Google ADK documentation](https://google.github.io/adk-docs/). You are solely responsible for testing, validating, and securing any code before use in a production environment.

**REMEMBER:** MODE 1 = JSON only. MODE 2 = Complete code with files.
"""

code_generator_agent = LlmAgent(
    name="code_generator_agent",
    model="gemini-2.5-pro",
    # Pass the pre-formatted, static string to the agent constructor.
    instruction=GENERATOR_INSTRUCTION,
)
